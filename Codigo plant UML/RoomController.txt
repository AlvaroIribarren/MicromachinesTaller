@startuml

title Manejo de las salas


class RoomController {
    -map<idRoom, room> rooms
    -map<idClient, client> clientWithoutRoom 
    -SafeCounter roomCounter
    -std::atomic_bool& acceptSocketRunning
    -std::mutex m
    -LobbyListener listener
    -Collector collector
    +int addRoom()
    +void addClient(int clientId, Protocol protocol)
    +void addClientToRoom(int roomId, int clientId)
}

class LobbyListener {
    +void start()
    +void run()
    +~LobbyListener();
}

class Collector {
    -map<idRoom, room>& rooms
    -map<idClient, client>& clientWithoutRoom 
    -int roomIdToBeErased;
    +start()
    +run()
    +assignRoomIdToBeErased()
}

class Room {
    -map<idClient, client> clients
    +void addClient(int clientId,
    shared_ptr<ClientThread> newClient);
    +void startGame();
    +bool isDead();
    +void stop();
    +void sendSnapshotToClients(std::shared_ptr
    <LobbySnapshot> &snapshot);
}
class Client
class SafeCounter {
    -int count
    +getValueAndAddOne()
}


RoomController "1" *-down- "many" Room: -rooms
RoomController "1" *-down- "many" Client: -clientsWithoutRoom
RoomController "1" *-down- "1" SafeCounter: -clientCounter
RoomController "1" *-down- "1" LobbyListener: -listener
RoomController "1" *-down- "many" Collector: -collector
Client "1" *-down- "1" EventSender: -sender
Client "1" *-down- "1" EventReceiver: -receiver

@enduml