@startuml

title Modelo de una sala


class Room { 
  -atomic_bool running;
  -map<idClient, client> clients 
  -SafeQueue<Event> incomingEvents   
  +Room(int amountOfClients)
  +void run()
  +void addClient(int clientId, 
  shared_ptr<Client> newClient)
  
}

class Thread{
    -thread thread
    +void start()
    +virtual void join();
    +virtual void run();
    +virtual ~Thread();
}
class Client {
    -Protocol protocol
    -SafeQueue<Event>* receivingQueue
    -SafeQueue<Event> sendingQueue
    +void run();
    +void sendSnapshot();
    +void sendStart(json j)
}
class Game {
    -World
    +Game(size_t numberOfPlayers,
        shared_ptr<Configuration> config)
    +void run(...)
}

class SafeCounter{
    -int count;
    +void returnValueAndAddOne();
}

Thread <|-down- Room: Inheritance
Thread <|-down- Client: Inhreritance
Room "1" *-down- "1" Game: Composition
Room "1" *-down- "many" Client: Composition
Room "1" *-down- "1" SafeCounter: Composition

@enduml